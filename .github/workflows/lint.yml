name: Lint

on:
  workflow_call:

  push:
    branches: [main]

  pull_request:
    branches: [main]

concurrency:
  group: lint-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint-commits:
    runs-on: ubuntu-20.04
    if: github.actor != 'dependabot[bot]'
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Check commits
        uses: wagoid/commitlint-github-action@v5

  lint-markdown:
    runs-on: ubuntu-20.04
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Lint markdown files
        uses: avto-dev/markdown-lint@v1.5.0
        with:
          args: "**/*.md"
          ignore: "./CHANGELOG.md"

  lint-yaml:
    runs-on: ubuntu-20.04
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Lint yaml files
        uses: ibiqlik/action-yamllint@v3.1.0

  lint-dockerfile:
    runs-on: ubuntu-20.04
    if: github.actor != 'dependabot[bot]'
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Lint dockerfile (hadolint)
        uses: hadolint/hadolint-action@v2.1.0

  lint-ts:
    runs-on: ubuntu-20.04
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Setup node environment (for building)
        uses: actions/setup-node@v3
        with:
          node-version: 16.14.0

      - name: Fetch dependencies
        run: |
          yarn

      - name: Lint typescript
        run: |
          yarn lint

  report_new_dependencies:
    runs-on: ubuntu-20.04
    if: github.event_name == 'pull_request' && github.actor != 'dependabot[bot]'
    steps:
      - name: Check for new dependencies
        uses: hiwelo/new-dependencies-action@1.0.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  lint-branch-name:
    runs-on: ubuntu-20.04
    if: github.actor != 'dependabot[bot]' && github.event_name == 'pull_request' && (github.event.action == 'opened' || github.event.action == 'reopened')
    steps:
      - name: Check branch name conventions
        uses: AlbertHernandez/branch-name-action@v1.0.2
        with:
          branch_pattern: "feat|fix|build|ci|docs|style|refactor|perf|test|chore"
          comment_for_invalid_branch_name: |
            üôã‚Äç Oops! This branch name does not follow the naming convention.

            <hr>

            Please, see the following branch naming convention:

            Branch naming convention | Purpose
            ------------------------ | -------
            `feat/**`                | A new feature
            `fix/**`                 | A bug fix
            `build/**`               | Changes that affect the build system (npm, mavem, poetry)
            `ci/**`                  | Changes to the CI configuration
            `docs/**`                | Documentation only changes
            `style/**`               | Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)
            `refactor/**`            | Code changes that neither fixe a bug nor adds a feature
            `perf/**`                | Code changes that improve performance
            `test/**`                | When adding tests or correcting existing tests
            `chore/**`               | Other changes that don't modify source
          fail_if_invalid_branch_name: "true"
          ignore_branch_pattern: "main"
      - name: Close non-compliant branch
        if: ${{ failure() }}
        uses: codelytv/no-pull-requests@v1
        with:
          GITHUB_TOKEN: ${{ secrets.OKP4_TOKEN }}
          message: üôÖ Closing the PR because it does not respect naming conventions. Edit the branch name and submit a new PR.
    env:
      GITHUB_TOKEN: ${{ secrets.OKP4_TOKEN }}

  lint-generated:
    runs-on: ubuntu-20.04
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Setup node environment (for building)
        uses: actions/setup-node@v3
        with:
          node-version: 16.14.0

      - name: Fetch dependencies
        run: |
          yarn

      - name: Generate graphql schema and queries
        run: |
          yarn graphql:code-gen

      - name: Check Git diff in generated files (graphql + yarn.lock)
        run: |
          if [[ $(git status -s) != "" ]]; then
            >&2 echo "‚ùå There is a diff between generated files and source code"
            >&2 git status
            exit 1
          fi

  lighthouse:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Setup node environment (for building)
        uses: actions/setup-node@v3
        with:
          node-version: 16.14.0

      - name: Fetch dependencies
        run: |
          yarn --frozen-lockfile

      - name: Build project
        run: |
          yarn build

      - name: Build Storybook
        run: |
          yarn build-storybook

      - name: Audit URLs using Lighthouse
        id: lighthouse_audit
        uses: treosh/lighthouse-ci-action@v9
        with:
          budgetPath: ./.github/lighthouse-budget.json
          configPath: ./.github/lighthouserc.json
          uploadArtifacts: true

      - name: Format lighthouse score
        id: format_lighthouse_score
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const scoreLabel = (rawScore) => {
              const score = Math.round(rawScore * 100);
              const scoreIcon = score >= 90
                ? 'üü¢'
                : score >= 50
                  ? 'üü†'
                  : 'üî¥';
              return `${scoreIcon} ${score}`;
            };

            const server_url = '${{ github.server_url }}';
            const repository = '${{ github.repository }}';
            const run_id = '${{ github.run_id }}';
            const linkToActionPage = `[Link to Actions Page](${server_url}/${repository}/actions/runs/${run_id})`;

            const formatIndicators = (summary) => {
              const performance = scoreLabel(summary.performance);
              const accessibility = scoreLabel(summary.accessibility);
              const bestPractices = scoreLabel(summary['best-practices']);
              const seo = scoreLabel(summary.seo);
              const pwa = scoreLabel(summary.pwa);
              return [performance,accessibility,bestPractices,seo,pwa];
            };

            const formatRow = (items) => '| '+items.join(' | ')+' |';

            const header = ['Performance','Accessibility','Best Practices','SEO','PWA'];
            const separator = ['---','---','---','---','---'];
            const results = ${{ steps.lighthouse_audit.outputs.manifest }};
            const rows = results.map(result => {
              const summary = result.summary;
              const indicators = formatIndicators(summary);
              return indicators;
            });

            const table = [ header, separator, ...rows ]
              .map(formatRow)
              .join('\n');
            const content = linkToActionPage + '\n\n' + table;
            core.setOutput("comment", content);

      - name: Add Lighthouse stats as comment
        id: comment_to_pr
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.OKP4_TOKEN }}
          number: ${{ github.event.pull_request.number }}
          header: lighthouse
          message: ${{ steps.format_lighthouse_score.outputs.comment }}
