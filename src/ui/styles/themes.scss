@import './palette.scss';

$themes: (
  light: (
    primary-brand: $color-light-primary-brand,
    primary-variant: $color-light-primary-variant,
    secondary-button: $color-light-secondary-button,
    secondary-selected: $color-light-secondary-selected,
    text: $color-light-text,
    inverted-text: $color-light-inverted-text,
    highlighted-text: $color-light-highlighted-text,
    field: $color-light-field,
    border: $color-light-border,
    primary-background: $color-light-background,
    secondary-background: $color-light-background-variant,
    tertiary-background: $color-light-background,
    header-background: $gradient-light-background-header,
    footer-background: $gradient-light-background-footer,
    footer-block-background: $color-light-background-footer-block,
    success: $color-light-success,
    warning: $color-light-warning,
    error: $color-light-error,
    info: $color-light-info,
    disabled: $color-light-disabled
  ),
  dark: (
    primary-brand: $color-dark-primary-brand,
    primary-variant: $color-dark-primary-variant,
    secondary-button: $color-dark-secondary-button,
    secondary-selected: $color-dark-secondary-selected,
    text: $color-dark-text,
    inverted-text: $color-dark-inverted-text,
    highlighted-text: $color-dark-highlighted-text,
    field: $color-dark-field,
    border: $color-dark-border,
    primary-background: $color-dark-background,
    secondary-background: $color-dark-background-variant,
    tertiary-background: $color-dark-primary-brand,
    header-background: $gradient-dark-background-header,
    footer-background: $gradient-dark-background-footer,
    footer-block-background: $gradient-dark-background-footer-block,
    success: $color-dark-success,
    warning: $color-dark-warning,
    error: $color-dark-error,
    info: $color-dark-info,
    disabled: $color-dark-disabled
  )
);

@mixin with-theme() {
  @each $theme, $map in $themes {
    .theme--#{$theme} & {
      $theme-map: () !global;
      @each $key, $submap in $map {
        $value: map-get(map-get($themes, $theme), '#{$key}');
        $theme-map: map-merge(
          $theme-map,
          (
            $key: $value
          )
        ) !global;
      }
      @content;
      $theme-map: null !global;
    }
  }
}

@function themed($key) {
  @if (map-has-key($theme-map, $key)) {
    @return map-get($theme-map, $key);
  } @else {
    @error 'ERROR: Specified key does not exist in themes';
  }
}

@mixin background-opacity($color, $opacity: 0.5) {
  background: $color;
  background: rgba($color, $opacity);
}
